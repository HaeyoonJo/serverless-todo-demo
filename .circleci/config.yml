version: 2.1
jobs:
  test:
    docker:
      - image: lambci/lambda:build-nodejs8.10 
    steps:
      - checkout
      - restore_cache:
          keys:
            - install-{{ .Branch }}-{{ checksum "serverless-api/package.json" }}
      - run: 
          working_directory: serverless-api
          command: npm i
      - save_cache:
          paths:
            -  serverless-api/node_modules
          key: install-{{ .Branch }}-{{ checksum "serverless-api/package.json" }}
      - run: 
          working_directory: serverless-api
          command: npm test
  # build:
  #   docker:
  #     - image: lambci/lambda:build-nodejs8.10
  #   steps:
  #     - restore_cache:
  #         keys:
  #           - install-{{ checksum "serverless-api/package-lock.json" }}
  #     - checkout
  #     - run: 
  #         working_directory: serverless-api
  #         command: npm i
  #     - save_cache:
  #         paths:
  #           -  serverless-api/node_modules
  #         key: install-{{ checksum "serverless-api/package-lock.json" }}
  #     - run: 
  #         working_directory: serverless-api
  #         command: npm run build
  #     - save_cache:
  #         key: build-{{ .Branch }}-{{ checksum "serverless-api/package-lock.json" }}
  deploy:
    docker:
      - image: lambci/lambda:build-nodejs8.10 
    steps:
      - checkout
      - restore_cache:
          keys:
            - install-{{ .Branch }}-{{ checksum "serverless-api/package.json" }}
      - run: 
          working_directory: serverless-api
          command: npm i
      - save_cache:
          paths:
            -  serverless-api/node_modules
          key: install-{{ .Branch }}-{{ checksum "serverless-api/package.json" }}
      - run: 
          working_directory: serverless-api
          command: 'echo -e "STAGE: $STAGE \nAWS_REGION: $AWS_REGION \nDEPLOYMENT_BUCKET: $DEPLOYMENT_BUCKET" > config.yml'
      - run: 
          working_directory: serverless-api
          command: npm run deploy
workflows:
  version: 2
  serverless-api:
    jobs:
      - test:
          filters:
            branches:
              only: 
                - master
                - alpha
      # - build:
      #     requires:
      #       - test
      #     filters:
      #       branches:
      #         only: 
      #           - master
      #           - alpha
      - hold:
          type: approval
          requires:
            - test
          filters:
            branches:
              only: 
                - master
      - deploy:
          requires:
            - hold
          filters:
            branches:
              only: 
                - master